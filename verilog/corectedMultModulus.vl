module mult3x3(p1, p2, p3, p4, p5, p6, a1, a2, a3, b1, b2, b3, r1, r2, r3, r4, r5, r6);
    input p1, p2, p3, p4, p5, p6, a1, a2, a3, b1, b2, b3;
    output r1, r2, r3, r4, r5, r6;
    wire [3:1] A;
    wire [3:1] B;
    wire [6:1] P;
    wire [6:1] R;

    assign A = {a1, a2, a3};
    assign B = {b1, b2, b3};
    assign P = {p1, p2, p3, p4, p5, p6};
    assign R = (A * B) % P;
    assign {r1, r2, r3, r4, r5, r6} = R;

endmodule

//----------------------------------------------------------------------

module mult3x3_8(p1, p2, p3, p4, p5, p6, a1, a2, a3, b1, b2, b3, r1, r2, r3, r4, r5, r6);
    input p1, p2, p3, p4, p5, p6, a1, a2, a3, b1, b2, b3;
    output r1, r2, r3, r4, r5, r6;
    wire [3:1] A;
    wire [3:1] B;
    wire [6:1] P;
    wire [6:1] R;

    assign A = {a1, a2, a3};
    assign B = {b1, b2, b3};
    assign P = {p1, p2, p3, p4, p5, p6};
    assign R = (A * B * 8) % P;
    assign {r1, r2, r3, r4, r5, r6} = R;

endmodule

//----------------------------------------------------------------------

module mult3x3_17(p1, p2, p3, p4, p5, p6, a1, a2, a3, b1, b2, b3, r1, r2, r3, r4, r5, r6);
    input p1, p2, p3, p4, p5, p6, a1, a2, a3, b1, b2, b3;
    output r1, r2, r3, r4, r5, r6;
    wire [3:1] A;
    wire [3:1] B;
    wire [6:1] P;
    wire [6:1] R;

    assign A = {a1, a2, a3};
    assign B = {b1, b2, b3};
    assign P = {p1, p2, p3, p4, p5, p6};
    assign R = (A * B * 64) % P;
    assign {r1, r2, r3, r4, r5, r6} = R;

endmodule

//----------------------------------------------------------------------

module mult_3_8(p1, p2, p3, p4, p5, p6, a1, a2, a3, r1, r2, r3, r4, r5, r6);
    input p1, p2, p3, p4, p5, p6, a1, a2, a3;
    output r1, r2, r3, r4, r5, r6;
    wire [3:1] A;
    wire [6:1] P;
    wire [6:1] R;

    assign A = {a1, a2, a3};
    assign P = {p1, p2, p3, p4, p5, p6};
    assign R = (A * 8) % P;
    assign {r1, r2, r3, r4, r5, r6} = R;

endmodule

//----------------------------------------------------------------------

module mult_2_17(p1, p2, p3, p4, p5, p6, a1, a2, r1, r2, r3, r4, r5, r6);
    input p1, p2, p3, p4, p5, p6, a1, a2, a3;
    output r1, r2, r3, r4, r5, r6;
    wire [2:1] A;
    wire [6:1] P;
    wire [6:1] R;

    assign A = {a1, a2};
    assign P = {p1, p2, p3, p4, p5, p6};
    assign R = (A * 64) % P;
    assign {r1, r2, r3, r4, r5, r6} = R;

endmodule

//----------------------------------------------------------------------


module mult_mod_47_bits(A, B, P, R);
    input [6:1] A, B, P;
    output [6:1] R;
    wire [6:1] r1, r2, r3, r4, r5, r6;
    wire [8:1] temp_R_1;
    wire [7:1] temp_R_2;
    reg [6:1] temp_R;

    mult3x3 label1 (.p1(P[6]), .p2(P[5]), .p3(P[4]),
                  .p4(P[3]), .p5(P[2]), .p6(P[1]),
                  .a1(A[3]), .a2(A[2]), .a3(A[1]),
                  .b1(B[3]), .b2(B[2]), .b3(B[1]),
                  .r1(r1[6]), .r2(r1[5]), .r3(r1[4]),
                  .r4(r1[3]), .r5(r1[2]), .r6(r1[1]));

    mult3x3_8 label2 (.p1(P[6]), .p2(P[5]), .p3(P[4]),
                  .p4(P[3]), .p5(P[2]), .p6(P[1]),
                  .a1(A[3]), .a2(A[2]), .a3(A[1]),
                  .b1(B[6]), .b2(B[5]), .b3(B[4]),
                  .r1(r2[6]), .r2(r2[5]), .r3(r2[4]),
                  .r4(r2[3]), .r5(r2[2]), .r6(r2[1]));

    mult3x3_8 label3 (.p1(P[6]), .p2(P[5]), .p3(P[4]),
                  .p4(P[3]), .p5(P[2]), .p6(P[1]),
                  .a1(A[6]), .a2(A[5]), .a3(A[4]),
                  .b1(B[3]), .b2(B[2]), .b3(B[1]),
                  .r1(r3[6]), .r2(r3[5]), .r3(r3[4]),
                  .r4(r3[3]), .r5(r3[2]), .r6(r3[1]));

    mult3x3_17 label4 (.p1(P[6]), .p2(P[5]), .p3(P[4]),
                  .p4(P[3]), .p5(P[2]), .p6(P[1]),
                  .a1(A[6]), .a2(A[5]), .a3(A[4]),
                  .b1(B[6]), .b2(B[5]), .b3(B[4]),
                  .r1(r4[6]), .r2(r4[5]), .r3(r4[4]),
                  .r4(r4[3]), .r5(r4[2]), .r6(r4[1]));

    assign temp_R_1 = r1 + r2 + r3 + r4;

    mult_3_8 label5 (.p1(P[6]), .p2(P[5]), .p3(P[4]),
                  .p4(P[3]), .p5(P[2]), .p6(P[1]),
                  .a1(temp_R_1[6]), .a2(temp_R_1[5]), .a3(temp_R_1[4]),
                 .r1(r5[6]), .r2(r5[5]), .r3(r5[4]),
                 .r4(r5[3]), .r5(r5[2]), .r6(r5[1]));

    mult_2_17 label6 (.p1(P[6]), .p2(P[5]), .p3(P[4]),
                  .p4(P[3]), .p5(P[2]), .p6(P[1]),
                  .a1(temp_R_1[8]), .a2(temp_R_1[7]),
                .r1(r6[6]), .r2(r6[5]), .r3(r6[4]),
                .r4(r6[3]), .r5(r6[2]), .r6(r6[1]));

    assign temp_R_2 = temp_R_1[3:1] + r5 + r6;

    always @(temp_R_2)
    begin
    if (temp_R_2 >= P)
        temp_R <= temp_R_2 - P;
    else
        temp_R <= temp_R_2;
    end

  assign R = temp_R;
endmodule


//----------------------------------------------------------------------



module testbench;
  reg [6:1] A;
  reg [6:1] B;
  reg [6:1] P;
  wire [6:1] R;

  mult_mod_47_bits dut (
    .A(A),
    .B(B),
    .P(P),
    .R(R)
  );

  initial begin
    A = 50; // Przykładowa wartość A
    B = 19; // Przykładowa wartość B
    P = 17; // Przykładowa wartość P
    #10000; // Symulacja zostanie zatrzymana po 10000 jednostkach czasu
    $display("R = %d", R);
    $finish;
  end
endmodule
